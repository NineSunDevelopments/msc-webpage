.sidebar-item
  = form_tag intern_users_path, {class: "nav nav-sidebar navbar-form", method: :get, id: "search-query-lists-form", style: "padding-left: 0; padding-right: 0;"} do
    .invisible
      - if params[:roles].is_a?(Array)
        - params[:roles].each do |role|
          = hidden_field_tag "roles[]", role
    = text_field_tag :query, params[:query], {class: "form-control", placeholder: I18n.t(:"users.filter.default_search"), style: "width: 100%;"}
    = submit_tag I18n.t(:search_button), {class: "invisible"}
.sidebar-item.with-filter-links
  .sidebar-item-header= I18n.t(:"users.filter.refine_by_roles")
  = link_to "#{content_tag(:span, nil, {class: "glyphicon glyphicon-#{(!params[:roles].is_a?(Array) or Array.wrap(params[:roles]).blank?) ? 'check' : 'unchecked'}", style: "color: #333333;"})} #{I18n.t(:"users.filter.all_roles")}".html_safe, refine_filter_inside_link(:all, :roles)
  - Constants::ROLES.each do |role|
    = link_to "#{content_tag(:span, nil, {class: "glyphicon glyphicon-#{(Array.wrap(params[:roles]).include?(role.to_s)) ? 'check' : 'unchecked'}", style: "color: #{Constants::ROLES_COLORS[role.to_sym]}"})} #{I18n.t(:"enumerize.user.role.#{role}")}".html_safe, refine_filter_inside_link(role.to_sym, :roles)
.sidebar-item.reset-filter-link
  = link_to I18n.t(:reset_filter), intern_users_path
